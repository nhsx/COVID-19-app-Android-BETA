/*
 * Copyright Â© 2020 NHSX. All rights reserved.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.ccil.cowan.tagsoup.Parser

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.github.triplet.play'
apply from: "$rootDir/ktlint.gradle"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "uk.nhs.nhsx.colocate"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments disableAnalytics: "true"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.incremental": "true"]
            }
        }
    }

    signingConfigs {
        config {
            keyAlias findProperty('SIGNING_KEY_ALIAS') ?: 'dummy-keystore'
            keyPassword findProperty('SIGNING_KEY_PASSWORD') ?: 'secret'
            storeFile file(findProperty('SIGNING_KEY_STORE') ?: 'dummy-keystore')
            storePassword findProperty('SIGNING_KEY_STORE_PASSWORD') ?: 'secret'
        }
    }

    defaultConfig {
        def baseUrl = findProperty("sonar.baseUrl") ?: {
            throw new MissingPropertyException("Missing property `sonar.baseUrl` please see README for instructions")
        }

        def headerValue = findProperty("sonar.headerValue") ?: {
            throw new MissingPropertyException("Missing property `sonar.headerValue` please see README for instructions")
        }

        def analyticsKey = findProperty("sonar.analyticsKey") ?: {
            throw new MissingPropertyException("Missing property `sonar.analyticsKey` please see README for instructions")
        }

        buildConfigField("String", "BASE_URL", "\"$baseUrl\"")
        buildConfigField("String", "SONAR_HEADER_VALUE", "\"$headerValue\"")
        buildConfigField("String", "SONAR_ANALYTICS_KEY", "\"${analyticsKey}\"")
        buildConfigField("String", "SONAR_SERVICE_UUID", "\"${property("sonar.serviceUuid")}\"")
        buildConfigField("String", "SONAR_ENCODED_BACKGROUND_IOS_SERVICE_UUID", "\"${property("sonar.encodedBackgroundIosServiceUuid")}\"")
        buildConfigField("String", "SONAR_IDENTITY_CHARACTERISTIC_UUID", "\"${property("sonar.identityCharacteristicUuid")}\"")
        buildConfigField("String", "SONAR_KEEP_ALIVE_CHARACTERISTIC_UUID", "\"${property("sonar.keepAliveCharacteristicUuid")}\"")
    }

    buildTypes {
        debug {
            testCoverageEnabled project.hasProperty("coverage")
        }
        staging {
            minifyEnabled false
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        animationsDisabled = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging.exceptionFormat = TestExceptionFormat.FULL
            testLogging.showStandardStreams = true
        }

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

play {
    enabled = project.hasProperty('play-enabled')
    serviceAccountCredentials = file(findProperty('PLAY_SERVICES_PUBLISH') ?: 'non-existing.json')

    track = "internal"
    defaultToAppBundles = true
    fromTrack = "internal"
    promoteTrack = "Test"
    resolutionStrategy = "auto"
    outputProcessor {
        def versionString = "$versionNameOverride.$versionCode"
        def gitCommit = findProperty('gitcommit') ?: 'unknown'
        def fullVersionString = "$versionString ($gitCommit)"

        versionNameOverride = fullVersionString

        logger.quiet("Publishing version: $fullVersionString")

        file("$buildDir/version.txt").text = "$versionString"
    }
}

task("outputInstrumentationErrors") {
    doFirst {
        def reportsDir = "$buildDir/reports/androidTests/connected"
        def htmlFiles = fileTree(dir: reportsDir, include: "*.html").getFiles()
        def slurper = new XmlSlurper(new Parser())

        htmlFiles
            .collectMany { file ->
                def html = slurper.parse(file)
                html.'**'.findAll { node -> node.name() == 'pre' }*.text()
            }
            .each { stacktrace ->
                System.err.println("\n==============================\n$stacktrace==============================\n")
            }
    }
}

afterEvaluate {
    tasks["connectedDebugAndroidTest"].finalizedBy("outputInstrumentationErrors")
}

def room_version = "2.2.5"
def timber_version = "4.7.1"
def lifecycle_version = "2.2.0"
def rx_android_ble_version = "1.11.1"
def work_version = "2.3.4"

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.firebase:firebase-messaging:20.1.6'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.2.4"
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "com.polidea.rxandroidble2:rxandroidble:$rx_android_ble_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'
    implementation "androidx.browser:browser:1.2.0"
    implementation 'org.bouncycastle:bcprov-jdk15on:1.64'

    def appCenterSdkVersion = '3.2.1'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"

    // Client
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'net.danlew:android.joda:2.10.3'

    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    kapt 'com.google.dagger:dagger-compiler:2.27'
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.27'
    implementation 'com.google.dagger:dagger:2.27'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // have to use 3.x.x version since Firebase crashlytics doesn't work with 4.x.x
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.14.7'
    androidTestImplementation 'org.assertj:assertj-core:3.15.0'
    androidTestImplementation "com.polidea.rxandroidble2:mockclient:$rx_android_ble_version"
    androidTestImplementation 'org.awaitility:awaitility-kotlin:3.1.6'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.5'
    testImplementation 'net.lachlanmckee:timber-junit-rule:1.0.1'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'org.awaitility:awaitility-kotlin:3.1.6'
    testImplementation 'io.mockk:mockk:1.10.0'
    testImplementation 'org.json:json:20190722'
    testImplementation 'au.com.dius:pact-jvm-consumer-junit:4.0.10'
    testImplementation 'org.slf4j:slf4j-api:1.7.30'
    testImplementation 'org.slf4j:slf4j-simple:1.7.30'
    testImplementation 'joda-time:joda-time:2.10.3'
}
